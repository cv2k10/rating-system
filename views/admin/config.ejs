<style>
    .brand-header {
        background: #fff;
        padding: 15px 30px;
        border-bottom: 1px solid #eee;
        margin-bottom: 20px;
    }
    .brand-title {
        font-size: 24px;
        font-weight: bold;
        color: #333;
        margin: 0;
    }
    .config-section {
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }
    .config-section h3 {
        color: #333;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }
    .question-item { 
        background: #f8f9fa;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 8px;
    }
    .question-title {
        font-weight: bold;
        color: #333;
    }
    .question-text {
        color: #666;
        margin: 10px 0;
    }
    .sort-handle {
        cursor: move;
        color: #999;
        margin-right: 10px;
    }
    .nav-tabs {
        margin-bottom: 0;
        border-bottom: none;
    }
    .nav-tabs .nav-link {
        margin-bottom: 0;
        background: none;
        border: 1px solid #dee2e6;
        border-bottom: none;
        color: #666;
    }
    .nav-tabs .nav-link.active {
        background-color: #fff;
        border-bottom: 1px solid #fff;
        margin-bottom: -1px;
        color: #333;
        font-weight: 500;
    }
    .tab-content {
        background: #fff;
        padding: 20px;
        border: 1px solid #dee2e6;
        border-radius: 0 0 8px 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .tab-content .config-section {
        box-shadow: none;
        padding: 0;
        margin: 0;
        border-radius: 0;
    }
    .tab-pane {
        padding: 20px 0;
    }
</style>

<div class="container mt-4">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" id="configTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="questions-tab" data-bs-toggle="tab" data-bs-target="#questions" type="button" role="tab">
                Rating Questions
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="services-tab" data-bs-toggle="tab" data-bs-target="#services" type="button" role="tab">
                Services
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="providers-tab" data-bs-toggle="tab" data-bs-target="#providers" type="button" role="tab">
                Service Providers
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="customers-tab" data-bs-toggle="tab" data-bs-target="#customers" type="button" role="tab">
                Customers
            </button>
        </li>
    </ul>

    <!-- Tab content -->
    <div class="tab-content" id="configTabContent">
        <!-- Rating Questions Tab -->
        <div class="tab-pane fade show active" id="questions" role="tabpanel">
            <div class="config-section">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3>Rating Questions</h3>
                    <button class="btn btn-primary" onclick="addQuestion()">Add New Question</button>
                </div>
                <div class="question-list" id="questionList">
                    <% questions.forEach(function(q) { %>
                        <div class="question-item" data-id="<%= q.id %>">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <i class="fas fa-grip-vertical sort-handle"></i>
                                    <div class="question-title"><%= q.title || 'Untitled' %></div>
                                    <div class="question-text"><%= q.question %></div>
                                </div>
                                <div>
                                    <button class="btn btn-sm btn-outline-primary edit-btn" 
                                            data-id="<%= q.id %>"
                                            data-title="<%= q.title %>"
                                            data-question="<%= q.question %>">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger delete-btn" data-id="<%= q.id %>">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>
        </div>

        <!-- Services Tab -->
        <div class="tab-pane fade" id="services" role="tabpanel">
            <div class="config-section">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3>Services</h3>
                    <button class="btn btn-primary" onclick="addService()">Add Service</button>
                </div>
                <div id="serviceList">
                    <% services.forEach(function(service) { %>
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span><%= service.name %></span>
                            <div>
                                <button class="btn btn-sm btn-outline-primary" onclick="editService('<%= service.id %>')">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteService('<%= service.id %>')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>
        </div>

        <!-- Service Providers Tab -->
        <div class="tab-pane fade" id="providers" role="tabpanel">
            <div class="config-section">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3>Service Providers</h3>
                    <button class="btn btn-primary" onclick="addProvider()">Add Provider</button>
                </div>
                <div id="providerList">
                    <% providers.forEach(function(provider) { %>
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span><%= provider.name %></span>
                            <div>
                                <button class="btn btn-sm btn-outline-primary" onclick="editProvider('<%= provider.id %>')">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteProvider('<%= provider.id %>')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>
        </div>

        <!-- Customers Tab -->
        <div class="tab-pane fade" id="customers" role="tabpanel">
            <div class="config-section">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3>Customers</h3>
                    <button class="btn btn-primary" onclick="addCustomer()">Add Customer</button>
                </div>
                <div id="customerList">
                    <% customers.forEach(function(customer) { %>
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span><%= customer.name %> (<%= customer.customer_id %>)</span>
                            <div>
                                <button class="btn btn-sm btn-outline-primary" onclick="editCustomer('<%= customer.id %>')">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteCustomer('<%= customer.id %>')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Keep all your existing modals here -->
<!-- Generic Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editForm">
                    <input type="hidden" id="editItemId">
                    <input type="hidden" id="editItemType">
                    <div class="mb-3" id="editNameField">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" id="editItemName" required>
                    </div>
                    <div class="mb-3" id="editCustomerIdField" style="display: none;">
                        <label class="form-label">Customer ID</label>
                        <input type="text" class="form-control" id="editCustomerId">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveEdit">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Question Modal -->
<div class="modal fade" id="questionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Question</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="questionForm">
                    <input type="hidden" id="questionId">
                    <div class="mb-3">
                        <label for="questionTitle" class="form-label">Title</label>
                        <input type="text" class="form-control" id="questionTitle" required>
                    </div>
                    <div class="mb-3">
                        <label for="questionText" class="form-label">Question</label>
                        <textarea class="form-control" id="questionText" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveQuestion">Save</button>
            </div>
        </div>
    </div>
</div>



<script>
    const adminPath = '<%= adminPath %>';
</script>

<script>
    // Helper function to show error messages
    function showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger alert-dismissible fade show';
        errorDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        // Find the tab content and insert at the top
        const activeTab = document.querySelector('.tab-pane.active');
        if (activeTab) {
            activeTab.insertBefore(errorDiv, activeTab.firstChild);
        }
    }

    // Helper function to refresh lists
    async function refreshList(type) {
        try {
            console.log('Refreshing list for:', type);
            console.log('Admin path:', adminPath);
            // Remove the 's' from type since we'll add it in the URL if needed
            const baseType = type.endsWith('s') ? type.slice(0, -1) : type;
            const url = `/${adminPath}/api/config/${baseType}s`;
            console.log('Fetching from URL:', url);
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const text = await response.text();
            console.log('Response text:', text);
            const items = JSON.parse(text);
            
            // Find the list element by type
            const listId = `${baseType}List`; 
            console.log('Looking for list element with ID:', listId);
            const list = document.getElementById(listId);
            if (!list) {
                throw new Error(`Could not find list element with ID: ${listId}`);
            }
            
            if (type === 'questions') {
                list.innerHTML = items.map(item => `
                    <div class="question-item" data-id="${item.id}">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <i class="fas fa-grip-vertical sort-handle"></i>
                                <div class="question-title">${item.title || 'Untitled'}</div>
                                <div class="question-text">${item.question}</div>
                            </div>
                            <div>
                                <button class="btn btn-sm btn-outline-primary" onclick="editQuestion('${item.id}')">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteQuestion('${item.id}')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `).join('');
            } else {
                list.innerHTML = items.map(item => `
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span>${item.name}${baseType === 'customer' ? ` (${item.customer_id})` : ''}</span>
                        <div>
                            <button class="btn btn-sm btn-outline-primary" onclick="edit${baseType}('${item.id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="delete${baseType}('${item.id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `).join('');
            }
        } catch (error) {
            console.error('Error in refreshList:', error);
            showError('Error refreshing list: ' + error.message);
        }
    }

    // Generic add function
    async function addItem(type) {
        try {
            console.log('Adding new', type);
            const editModal = new bootstrap.Modal(document.getElementById('editModal'));
            const editItemId = document.getElementById('editItemId');
            const editItemType = document.getElementById('editItemType');
            const editItemName = document.getElementById('editItemName');
            const editCustomerId = document.getElementById('editCustomerId');
            const editCustomerIdField = document.getElementById('editCustomerIdField');
            
            editItemId.value = '';
            editItemType.value = type;
            editItemName.value = '';
            
            if (type === 'customer') {
                editCustomerIdField.style.display = 'block';
                editCustomerId.value = '';
            } else {
                editCustomerIdField.style.display = 'none';
            }
            
            document.querySelector('#editModal .modal-title').textContent = `Add New ${type.charAt(0).toUpperCase() + type.slice(1)}`;
            
            editModal.show();
        } catch (error) {
            console.error('Error in addItem:', error);
            showError('Error preparing add form: ' + error.message);
        }
    }

    // Add functions for each type
    function addService() { addItem('service'); }
    function addProvider() { addItem('provider'); }
    function addCustomer() { addItem('customer'); }

    // Generic edit function
    async function editItem(type, id) {
        try {
            console.log('Editing', type, id);
            const url = `/${adminPath}/api/config/${type}/${id}`;
            console.log('Fetching from URL:', url);
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const text = await response.text();
            console.log('Response text:', text);
            const item = JSON.parse(text);
            
            const editModal = new bootstrap.Modal(document.getElementById('editModal'));
            const editItemId = document.getElementById('editItemId');
            const editItemType = document.getElementById('editItemType');
            const editItemName = document.getElementById('editItemName');
            const editCustomerId = document.getElementById('editCustomerId');
            const editCustomerIdField = document.getElementById('editCustomerIdField');
            
            editItemId.value = id;
            editItemType.value = type;
            editItemName.value = item.name;
            
            if (type === 'customer') {
                editCustomerIdField.style.display = 'block';
                editCustomerId.value = item.customer_id;
            } else {
                editCustomerIdField.style.display = 'none';
            }
            
            document.querySelector('#editModal .modal-title').textContent = `Edit ${type.charAt(0).toUpperCase() + type.slice(1)}`;
            
            editModal.show();
        } catch (error) {
            console.error('Error in editItem:', error);
            showError('Error loading item: ' + error.message);
        }
    }

    // Edit functions for each type
    function editService(id) { editItem('service', id); }
    function editProvider(id) { editItem('provider', id); }
    function editCustomer(id) { editItem('customer', id); }

    // Generic delete function
    async function deleteItem(type, id) {
        if (!confirm(`Are you sure you want to delete this ${type}?`)) return;
        
        try {
            console.log('Deleting', type, id);
            const url = `/${adminPath}/api/config/${type}/${id}`;
            console.log('Sending DELETE to URL:', url);
            const response = await fetch(url, {
                method: 'DELETE'
            });
            
            if (!response.ok) throw new Error('Failed to delete item');
            
            await refreshList(`${type}s`);
        } catch (error) {
            console.error('Error in deleteItem:', error);
            showError('Error deleting item: ' + error.message);
        }
    }

    // Delete functions for each type
    function deleteService(id) { deleteItem('service', id); }
    function deleteProvider(id) { deleteItem('provider', id); }
    function deleteCustomer(id) { deleteItem('customer', id); }

    // Question functions
    function editQuestion(id) {
        try {
            console.log('Editing question:', id);
            const url = `/${adminPath}/api/config/question/${id}`;
            console.log('Fetching from URL:', url);
            
            fetch(url)
                .then(response => response.json())
                .then(item => {
                    const questionModal = new bootstrap.Modal(document.getElementById('questionModal'));
                    document.getElementById('questionId').value = id;
                    document.getElementById('questionTitle').value = item.title || '';
                    document.getElementById('questionText').value = item.question;
                    questionModal.show();
                })
                .catch(error => {
                    console.error('Error loading question:', error);
                    showError('Error loading question: ' + error.message);
                });
        } catch (error) {
            console.error('Error in editQuestion:', error);
            showError('Error loading question: ' + error.message);
        }
    }

    function deleteQuestion(id) {
        if (!confirm('Are you sure you want to delete this question?')) return;
        
        try {
            console.log('Deleting question:', id);
            const url = `/${adminPath}/api/config/question/${id}`;
            console.log('Sending DELETE to URL:', url);
            
            fetch(url, { method: 'DELETE' })
                .then(response => {
                    if (!response.ok) throw new Error('Failed to delete question');
                    return refreshList('questions');
                })
                .catch(error => {
                    console.error('Error deleting question:', error);
                    showError('Error deleting question: ' + error.message);
                });
        } catch (error) {
            console.error('Error in deleteQuestion:', error);
            showError('Error deleting question: ' + error.message);
        }
    }

    // Handle edit form submission
    document.getElementById('saveEdit').addEventListener('click', async () => {
        try {
            const editModal = bootstrap.Modal.getInstance(document.getElementById('editModal'));
            const id = document.getElementById('editItemId').value;
            const type = document.getElementById('editItemType').value;
            const name = document.getElementById('editItemName').value;
            const customerId = document.getElementById('editCustomerId').value;
            
            const data = { name };
            if (type === 'customer') {
                data.customer_id = customerId;
            }
            
            const url = id ? 
                `/${adminPath}/api/config/${type}/${id}` : 
                `/${adminPath}/api/config/${type}`;
            
            console.log('Saving item:', { type, id, data });
            console.log('Sending to URL:', url);
            
            const response = await fetch(url, {
                method: id ? 'PUT' : 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(errorText);
            }
            
            editModal.hide();
            await refreshList(`${type}s`);
        } catch (error) {
            console.error('Error in form submission:', error);
            showError('Error saving item: ' + error.message);
        }
    });


    // Add question handling
function addQuestion() { 
    const questionModal = new bootstrap.Modal(document.getElementById('questionModal'));
    document.getElementById('questionId').value = '';
    document.getElementById('questionTitle').value = '';
    document.getElementById('questionText').value = '';
    questionModal.show();
}

// Save question
document.getElementById('saveQuestion').addEventListener('click', async () => {
    try {
        const questionModal = bootstrap.Modal.getInstance(document.getElementById('questionModal'));
        const id = document.getElementById('questionId').value;
        const title = document.getElementById('questionTitle').value;
        const question = document.getElementById('questionText').value;
        
        if (!title || !question) {
            showError('Title and question are required');
            return;
        }
        
        const url = id ? 
            `/${adminPath}/api/config/question/${id}` : 
            `/${adminPath}/api/config/question`;
        
        console.log('Saving question:', { id, title, question });
        console.log('Sending to URL:', url);
        
        const response = await fetch(url, {
            method: id ? 'PUT' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ title, question })
        });
        
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(errorText);
        }
        
        questionModal.hide();
        await refreshList('questions');
    } catch (error) {
        console.error('Error saving question:', error);
        showError('Error saving question: ' + error.message);
    }
});

// Update the button click handler
document.querySelector('[data-bs-target="#questionModal"]').addEventListener('click', function() {
    addQuestion();
});
</script>